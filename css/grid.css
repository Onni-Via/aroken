body {
    background-color: #333; /* Устанавливает цвет фона элемента body. Значение #333 — это темно-серый цвет в шестнадцатеричной системе. */
    color: #fff; /* Определяет цвет текста внутри элемента body. Значение #fff обозначает белый цвет. */
    font-family: sans-serif; /* Задает семейство шрифтов для текста: sans-serif — это шрифты без засечек (например, Arial или Helvetica). */
}

.wrapper {
    padding: 50px; /* Устанавливает внутренние отступы со всех сторон элемента .wrapper. Отступ равен 50 пикселям. */
    min-height: 100%; /* Задает минимальную высоту элемента .wrapper как 100% от высоты родительского элемента. */
}

.container {
    max-width: 1000px; /* Устанавливает максимальную ширину элемента .container. Если контент меньше, ширина будет адаптироваться. */
    margin: 0 auto; /* Центрирует элемент по горизонтали, добавляя автоматические внешние отступы слева и справа. */
}

.grid {
    margin-bottom: 200px; /* Добавляет внешний отступ снизу элемента .grid. Значение 200px создает пространство под блоком. */
    padding-bottom: 200px; /* Добавляет внутренний отступ снизу элемента .grid. Это влияет на содержимое внутри блока. */
    border-bottom: 10px solid #c34f4f; /* Создает сплошную границу снизу элемента. Толщина границы — 10px, цвет — красный (#c34f4f). */
    min-height: 100vh; /* Устанавливает минимальную высоту элемента .grid как 100% высоты видимой области экрана (viewport height). */
    background-color: rgb(
        55,
        54,
        59
    ); /* Задает цвет фона элемента .grid в RGB-формате. Цвет — темно-серый с небольшим оттенком. */
}

.item {
    border: 5px dashed #444; /* Создает пунктирную границу вокруг элемента .item. Толщина границы — 5px, цвет — темно-серый (#444). */
    font-size: 40px; /* Задает размер шрифта текста внутри элемента .item. Значение 40px делает текст крупным. */
    padding: 0.8em; /* Добавляет внутренние отступы со всех сторон элемента .item. Значение .8em означает 80% от текущего размера шрифта. */
    text-align: center; /* Выравнивает текст внутри элемента по центру горизонтально. */
    background-color: #c34f4f88; /* Задает полупрозрачный фон для элемента .item. Цвет — красный с прозрачностью (88 в шестнадцатеричной системе = 53% непрозрачности). */
}

/* -------------------------------------------------------- */

.grid-1 {
    display: grid;
    /* 
        Устанавливает тип отображения элемента .grid-1 как CSS Grid Layout.
        CSS Grid — это двумерная система макетирования, которая позволяет создавать сетки с колонками и строками.
        Она идеально подходит для создания сложных макетов, таких как карточки продуктов, галереи изображений и многостраничные сайты.
    */

    /* grid-template-columns: 1fr minmax(200px, 1fr) 1fr; */
    /* Определяет три колонки: первая и третья занимают равное пространство (1fr), вторая имеет минимальную ширину 200px и может растягиваться до 1fr. */

    /* grid-template-columns: 1fr fit-content(400px) 1fr; */
    /* Определяет три колонки: первая и третья занимают равное пространство (1fr), вторая принимает ширину содержимого, но не более 400px. */

    /* grid-template-columns: repeat(3, 1fr);
       grid-template-rows: auto auto; */
    /* Создает три колонки равной ширины (1fr) и две строки автоматической высоты. */

    grid-template: repeat(2, 300px) / repeat(3, 1fr);
    /* 
        Комбинированное свойство:
        - Первый аргумент (`auto auto`) определяет две строки автоматической высоты.
        - Второй аргумент (`repeat(3, 1fr)`) создает три колонки равной ширины.
        Это сокращенная запись для одновременного определения строк и колонок.
    */

    justify-items: end; /* 
        Выравнивает все элементы внутри сетки по горизонтали (вдоль строки) в конце ячейки.
        Элементы будут прижаты к правой стороне своей ячейки.
    */
    align-items: end; /* 
        Выравнивает все элементы внутри сетки по вертикали (вдоль колонки) в конце ячейки.
        Элементы будут прижаты к нижней стороне своей ячейки.
    */
}

.grid-1__item--1 {
    order: 1; /* 
        Устанавливает порядок отображения элемента в сетке.
        Чем меньше значение `order`, тем раньше элемент будет отображен.
    */
}
.grid-1__item--2 {
    order: 2; /* 
        Этот элемент будет отображен после элемента с `order: 1`.
    */
}
.grid-1__item--3 {
    order: 5; /* 
        Этот элемент будет отображен позже всех, так как его `order` больше, чем у других элементов.
    */
}
.grid-1__item--4 {
    order: 4; /* 
        Этот элемент будет отображен перед элементом с `order: 5`.
    */
    justify-self: stretch; /* 
        Растягивает элемент по горизонтали, чтобы он занял всю доступную ширину своей ячейки.
    */
    align-self: center; /* 
        Выравнивает элемент по вертикали по центру своей ячейки.
    */
}
.grid-1__item--5 {
    order: 3; /* 
        Этот элемент будет отображен между элементами с `order: 2` и `order: 4`.
    */
}
.grid-1__item--6 {
    order: 6; /* 
        Этот элемент будет отображен последним, так как его `order` больше, чем у всех остальных элементов.
    */
}

/* ------------- */

.grid-2 {
    display: grid; /* 
        Устанавливает тип отображения элемента как CSS Grid Layout.
    */
    /* grid-template: repeat(3, 1fr) / repeat(2, 1fr); */ /*
        Создает три строки высотой `1fr` и две колонки шириной `1fr`.
        Сетка будет состоять из равных частей.
    */

    /* grid-template: 1fr 5fr 2fr / 1fr 300px;
       grid-template-areas: 
       "header header"
       "main aside"
       "footer footer"; */ /*
        Определяет три строки с разной высотой (1fr, 5fr, 2fr) и две колонки (1fr и 300px).
        Используется `grid-template-areas` для создания семантической структуры макета.
    */

    grid-template:
        "header header" 1fr /* Первая строка называется "header", высота — 1fr. */
        "main aside" 5fr /* Вторая строка называется "main" и "aside", высота — 5fr. */
        "footer footer" 2fr /* Третья строка называется "footer", высота — 2fr. */
        / 1fr 300px; /* Две колонки: первая шириной 1fr, вторая фиксированной шириной 300px. */
    /* Почему-то так нельзя: repeat(2, 1fr) */
    /* 
        Функция `repeat()` не может быть использована здесь, потому что она не поддерживается 
        в сочетании с именованными областями (`grid-template-areas`).
    */
}

.grid-2__item--header {
    grid-area: header; /* 
        Привязывает элемент к области "header", определенной в `grid-template-areas`.
    */
}
.grid-2__item--main {
    grid-area: main; /* 
        Привязывает элемент к области "main".
    */
}
.grid-2__item--aside {
    grid-area: aside; /* 
        Привязывает элемент к области "aside".
    */
}
.grid-2__item--footer {
    grid-area: footer; /* 
        Привязывает элемент к области "footer".
    */
}

/* ------------- */

.grid-3 {
    display: grid; /* 
        Устанавливает тип отображения элемента как CSS Grid Layout.
    */
    grid-template: 1fr 1fr / 1fr 1fr 1fr; /* 
        Создает две строки высотой `1fr` и три колонки шириной `1fr`.
    */
    /* grid-auto-rows: 400px; */ /*
        Задает автоматическую высоту для новых строк, если элементов больше, чем определено в `grid-template`.
    */
    /* grid-auto-columns: 300px; */ /*
        Задает автоматическую ширину для новых колонок, если элементов больше, чем определено в `grid-template`.
    */
    grid-auto-flow: dense; /* 
        Позволяет браузеру заполнять пустые ячейки сетки, даже если элементы находятся не по порядку.
        Это полезно для оптимизации размещения элементов.
    */
}

.grid-3__item--6 {
    grid-column: span 2; /* 
        Растягивает элемент на две колонки вместо одной.
        Элемент займет пространство двух ячеек по горизонтали.
    */
}

/* ------------- */

.grid-4 {
    display: grid; /* 
        Устанавливает тип отображения элемента как CSS Grid Layout.
    */
    /* grid-template: 1fr 1fr / 1fr 1fr 1fr; */ /*
        Создает две строки высотой `1fr` и три колонки шириной `1fr`.
    */
    grid-template:
        [row1] 1fr [row2] 1fr [row3] /* 
        Определяет три строки с именованными границами: row1, row2, row3.
        Каждая строка имеет высоту `1fr`.
    */
        / [col1] 1fr [col2] 1fr [col3] 1fr [col4]; /* 
        Определяет четыре колонки с именованными границами: col1, col2, col3, col4.
        Каждая колонка имеет ширину `1fr`.
    */
    grid-gap: 20px 50px; /* 
        Задает расстояние между строками (20px) и колонками (50px).
    */
    /* row-gap: 20px; */ /*
        Задает расстояние между строками (альтернатива первой части `grid-gap`).
    */
    /* column-gap: 50px; */ /*
        Задает расстояние между колонками (альтернатива второй части `grid-gap`).
    */
}

.grid-4__item--3 {
    /* grid-row: 2/3; */ /*
        Размещает элемент во второй строке (начиная с индекса 2) и заканчивает в третьей строке (индекс 3).
    */
    /* grid-column: 1/4; */ /*
        Размещает элемент в первой колонке (начиная с индекса 1) и заканчивает в четвертой колонке (индекс 4).
    */

    /* grid-row-start: 2;
       grid-row-end: 3;
       grid-column-start: 1;
       grid-column-end: 4; */ /*
        Альтернативный способ задания позиции элемента:
        - Начало строки: 2.
        - Конец строки: 3.
        - Начало колонки: 1.
        - Конец колонки: 4.
    */

    grid-row: row2 / row3; /* 
        Размещает элемент между границами `row2` и `row3`.
    */
    grid-column: col3 / col4; /* 
        Размещает элемент между границами `col3` и `col4`.
    */
}
